{
  "address": "0x37b97445289A3E5B08d6eA766DF31bF143E4169D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "actual",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "expected",
          "type": "bytes32"
        }
      ],
      "name": "InvalidTargetBridge",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "crossChainTxParams",
          "type": "bytes"
        }
      ],
      "name": "sendCrossChainMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32780729071049e26d9d96c0e173ac6d4d32f7bc466f66b825535d71ec4b6f65",
  "receipt": {
    "to": null,
    "from": "0x4A8Cc549c71f12817F9aA25F7f6a37EB1A4Fa087",
    "contractAddress": "0x37b97445289A3E5B08d6eA766DF31bF143E4169D",
    "transactionIndex": 0,
    "gasUsed": "509157",
    "logsBloom": "0x
    "blockHash": "0xf38a94ab78f5c7ceac9af808a975a5c27b0509f6968b8bd7a1733da37e60b808",
    "transactionHash": "0x32780729071049e26d9d96c0e173ac6d4d32f7bc466f66b825535d71ec4b6f65",
    "logs": [],
    "blockNumber": 32210676,
    "cumulativeGasUsed": "509157",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x22F24361D548e5FaAfb36d1437839f080363982B"
  ],
  "numDeployments": 1,
  "solcInputHash": "69b29981f1c2a743a8487184243d404e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"InvalidTargetBridge\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"crossChainTxParams\",\"type\":\"bytes\"}],\"name\":\"sendCrossChainMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/senders/SenderOptimismL1.sol\":\"SenderOptimismL1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/crosschain/CrossChainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/CrossChainEnabled.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./errors.sol\\\";\\n\\n/**\\n * @dev Provides information for building cross-chain aware contracts. This\\n * abstract contract provides accessors and modifiers to control the execution\\n * flow when receiving cross-chain messages.\\n *\\n * Actual implementations of cross-chain aware contracts, which are based on\\n * this abstraction, will  have to inherit from a bridge-specific\\n * specialization. Such specializations are provided under\\n * `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabled {\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution.\\n     */\\n    modifier onlyCrossChain() {\\n        if (!_isCrossChain()) revert NotCrossChainCall();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution initiated by `account`.\\n     */\\n    modifier onlyCrossChainSender(address expected) {\\n        address actual = _crossChainSender();\\n        if (expected != actual) revert InvalidCrossChainSender(actual, expected);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message.\\n     */\\n    function _isCrossChain() internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Returns the address of the sender of the cross-chain message that\\n     * triggered the current function call.\\n     *\\n     * IMPORTANT: Should revert with `NotCrossChainCall` if the current function\\n     * call is not the result of a cross-chain message.\\n     */\\n    function _crossChainSender() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Sends a generic cross-chain message through a bridge.\\n     *\\n     * IMPORTANT: The structure of the crossChainTxParams is defined in the implementations\\n     * and can be built using the SDKs of the corresponding bridge most of the times.\\n     *\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded struct representing the configuration required\\n     * for the message to be sent through the bridge.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x1c08eca01a31352431755c5081896b921ae3dc1e4679b278e2309ed0eb7b60ef\",\"license\":\"MIT\"},\"contracts/crosschain/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/errors.sol)\\n\\npragma solidity ^0.8.4;\\n\\nerror NotCrossChainCall();\\nerror InvalidCrossChainSender(address actual, address expected);\\nerror InvalidTargetBridge(bytes32 actual, bytes32 expected);\\n\",\"keccak256\":\"0x39aeb23b80f089177825252531e5e653caac7f2440a54c0e1aa423069314e0b6\",\"license\":\"MIT\"},\"contracts/crosschain/optimism/CrossChainEnabledOptimismL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/optimism/CrossChainEnabledOptimism.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../CrossChainEnabled.sol\\\";\\nimport \\\"./LibOptimismL1.sol\\\";\\n\\n/**\\n * @dev https://www.optimism.io/[Optimism] specialization or the\\n * {CrossChainEnabled} abstraction.\\n *\\n * The bridge (`L1StandardBridge`) contract is provided and maintained by\\n * the optimism team. You can find the address of this contract on mainnet and\\n * kovan in the https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts/deployments[deployments section of Optimism monorepo].\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabledOptimismL1 is CrossChainEnabled {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _l1StandardBridge;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address l1StandardBridge) {\\n        _l1StandardBridge = l1StandardBridge;\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_isCrossChain}\\n     */\\n    function _isCrossChain() internal view virtual override returns (bool) {\\n        return LibOptimismL1.isCrossChain(_l1StandardBridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_crossChainSender}\\n     */\\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\\n        return LibOptimismL1.crossChainSender(_l1StandardBridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_sendCrossChainMessage}\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual override {\\n        LibOptimismL1.sendCrossChainMessage(_l1StandardBridge, destination, data, crossChainTxParams);\\n    }\\n}\\n\",\"keccak256\":\"0x4525964b2e6a3541d3206818c80f128c2eea06351f151f04c1a63d32d13b0d02\",\"license\":\"MIT\"},\"contracts/crosschain/optimism/LibOptimismL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/optimism/LibOptimism.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {ICrossDomainMessenger} from \\\"../../vendor/optimism/ICrossDomainMessenger.sol\\\";\\nimport {IL1StandardBridge} from \\\"../../vendor/optimism/IL1StandardBridge.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\n/**\\n * @dev Primitives for cross-chain aware contracts for https://www.optimism.io/[Optimism].\\n * See the https://community.optimism.io/docs/developers/bridge/messaging/#accessing-msg-sender[documentation]\\n * for the functionality used here.\\n *\\n * This version should only be used on L1 to process cross-chain messages\\n * originating from L2, or to send cross-chain messages from L1 to L2. For\\n * the other side, use {LibOptimismL2}.\\n */\\nlibrary LibOptimismL1 {\\n    /**\\n     * @dev This is the keccak256('Optimism-L1L2')\\n     */\\n    bytes4 public constant BRIDGE_ID = 0x8a69005a;\\n\\n    /**\\n     * @dev These are the parameters required for sending the cross-chain message.\\n     *\\n     * @param bridgeId This Id is used to ensure this bridge only send messages intended for this bridge,\\n     * avoiding some unexpected scenarios if a config for a different bridge matches.\\n     */\\n    struct CrossChainTxParams {\\n        bytes4 bridgeId;\\n        uint32 gasLimit;\\n        uint256 depositValue;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message relayed by `messenger`.\\n     */\\n    function isCrossChain(address bridge) internal view returns (bool) {\\n        address messenger = IL1StandardBridge(bridge).messenger();\\n\\n        return msg.sender == messenger;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the sender that triggered the current\\n     * cross-chain message through `messenger`.\\n     *\\n     * NOTE: {isCrossChain} should be checked before trying to recover the\\n     * sender, as it will revert with `NotCrossChainCall` if the current\\n     * function call is not the result of a cross-chain message.\\n     */\\n    function crossChainSender(address bridge) internal view returns (address) {\\n        address messenger = IL1StandardBridge(bridge).messenger();\\n\\n        if (!isCrossChain(messenger)) revert NotCrossChainCall();\\n\\n        return ICrossDomainMessenger(messenger).xDomainMessageSender();\\n    }\\n\\n    /**\\n     * @dev Sends a cross-chain message via `messenger`.\\n     *\\n     * NOTE: Check https://community.optimism.io/docs/developers/bridge/messaging/#[Fees for sending data between L1 and L2]\\n     * to understand gasLimit implications.\\n     *\\n     * @param bridge The L1StandardBridge contract representing the bridge.\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded {CrossChainTxParams} representing the parameters required\\n     * for the message to be sent through the bridge.\\n     */\\n    function sendCrossChainMessage(\\n        address bridge,\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal {\\n        CrossChainTxParams memory params = abi.decode(crossChainTxParams, (CrossChainTxParams));\\n\\n        if (BRIDGE_ID != params.bridgeId) revert InvalidTargetBridge(params.bridgeId, BRIDGE_ID);\\n\\n        if (params.depositValue > 0) {\\n            // deposit ETH through standard bridge\\n            IL1StandardBridge(bridge).depositETHTo{value: params.depositValue}(\\n                destination,\\n                params.gasLimit,\\n                data\\n            );\\n        } else {\\n            // send the message directly through the messenger\\n            address messenger = IL1StandardBridge(bridge).messenger();\\n            ICrossDomainMessenger(messenger).sendMessage(destination, data, params.gasLimit);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5ab8be424f34f3263a77d0a85100a6b119d76e5b3267d3c36a59cd0e07db81bb\",\"license\":\"MIT\"},\"contracts/senders/SenderOptimismL1.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"../crosschain/optimism/CrossChainEnabledOptimismL1.sol\\\";\\n\\ncontract SenderOptimismL1 is CrossChainEnabledOptimismL1 {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address bridge_) CrossChainEnabledOptimismL1(bridge_) {}\\n\\n    function sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) external payable {\\n        _sendCrossChainMessage(destination, data, crossChainTxParams);\\n    }\\n}\\n\",\"keccak256\":\"0x20081117ff32df1050ddf9ce73f04dea68b9a1d997a44481c9629ea2a432c17f\",\"license\":\"Unlicense\"},\"contracts/vendor/optimism/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/optimism/ICrossDomainMessenger.sol)\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit);\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param target Target contract address.\\n     * @param message Message to send to the target.\\n     * @param gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address target,\\n        bytes calldata message,\\n        uint32 gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4ac74035c033445a1baeec0c2939c9c7a88e388d2b7c8b6bda535ebaed65af5\",\"license\":\"MIT\"},\"contracts/vendor/optimism/IL1StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IL1StandardBridge\\n */\\ninterface IL1StandardBridge {\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function messenger() external view returns (address);\\n\\n    /**\\n     * @dev Deposit an amount of ETH to a recipient's balance on L2.\\n     * @param _to L2 address to credit the withdrawal to.\\n     * @param _l2Gas Gas limit required to complete the deposit on L2.\\n     * @param _data Optional data to forward to L2. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function depositETHTo(\\n        address _to,\\n        uint32 _l2Gas,\\n        bytes calldata _data\\n    ) external payable;\\n\\n    /*************************\\n     * Cross-chain Functions *\\n     *************************/\\n}\\n\",\"keccak256\":\"0xc16b7cd801b4de5b97a8382673cf0f56599bf85105485bec7e146722f055a698\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161094a38038061094a833981810160405281019061003291906100d1565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050506100fe565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009e82610073565b9050919050565b6100ae81610093565b81146100b957600080fd5b50565b6000815190506100cb816100a5565b92915050565b6000602082840312156100e7576100e661006e565b5b60006100f5848285016100bc565b91505092915050565b6080516108326101186000396000605401526108326000f3fe60806040526004361061001e5760003560e01c8063a8ea9bd014610023575b600080fd5b61003d60048036038101906100389190610463565b61003f565b005b61004a83838361004f565b505050565b61007b7f0000000000000000000000000000000000000000000000000000000000000000848484610080565b505050565b6000818060200190518101906100969190610621565b905080600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916638a69005a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610132578060000151638a69005a60e01b6040517ff0cd8b8300000000000000000000000000000000000000000000000000000000815260040161012992919061066f565b60405180910390fd5b6000816040015111156101bc578473ffffffffffffffffffffffffffffffffffffffff16639a2ac6d58260400151868460200151876040518563ffffffff1660e01b81526004016101859392919061073e565b6000604051808303818588803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b50505050506102a4565b60008573ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610791565b90508073ffffffffffffffffffffffffffffffffffffffff16633dbb202b868685602001516040518463ffffffff1660e01b8152600401610270939291906107be565b600060405180830381600087803b15801561028a57600080fd5b505af115801561029e573d6000803e3d6000fd5b50505050505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ea826102bf565b9050919050565b6102fa816102df565b811461030557600080fd5b50565b600081359050610317816102f1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61037082610327565b810181811067ffffffffffffffff8211171561038f5761038e610338565b5b80604052505050565b60006103a26102ab565b90506103ae8282610367565b919050565b600067ffffffffffffffff8211156103ce576103cd610338565b5b6103d782610327565b9050602081019050919050565b82818337600083830152505050565b6000610406610401846103b3565b610398565b90508281526020810184848401111561042257610421610322565b5b61042d8482856103e4565b509392505050565b600082601f83011261044a5761044961031d565b5b813561045a8482602086016103f3565b91505092915050565b60008060006060848603121561047c5761047b6102b5565b5b600061048a86828701610308565b935050602084013567ffffffffffffffff8111156104ab576104aa6102ba565b5b6104b786828701610435565b925050604084013567ffffffffffffffff8111156104d8576104d76102ba565b5b6104e486828701610435565b9150509250925092565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610528816104f3565b811461053357600080fd5b50565b6000815190506105458161051f565b92915050565b600063ffffffff82169050919050565b6105648161054b565b811461056f57600080fd5b50565b6000815190506105818161055b565b92915050565b6000819050919050565b61059a81610587565b81146105a557600080fd5b50565b6000815190506105b781610591565b92915050565b6000606082840312156105d3576105d26104ee565b5b6105dd6060610398565b905060006105ed84828501610536565b600083015250602061060184828501610572565b6020830152506040610615848285016105a8565b60408301525092915050565b600060608284031215610637576106366102b5565b5b6000610645848285016105bd565b91505092915050565b6000610659826104f3565b9050919050565b6106698161064e565b82525050565b60006040820190506106846000830185610660565b6106916020830184610660565b9392505050565b6106a1816102df565b82525050565b6106b08161054b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106f05780820151818401526020810190506106d5565b838111156106ff576000848401525b50505050565b6000610710826106b6565b61071a81856106c1565b935061072a8185602086016106d2565b61073381610327565b840191505092915050565b60006060820190506107536000830186610698565b61076060208301856106a7565b81810360408301526107728184610705565b9050949350505050565b60008151905061078b816102f1565b92915050565b6000602082840312156107a7576107a66102b5565b5b60006107b58482850161077c565b91505092915050565b60006060820190506107d36000830186610698565b81810360208301526107e58185610705565b90506107f460408301846106a7565b94935050505056fea264697066735822122068a29a00be4989a8edf5a69011c029dc2af91c449a5fb3943b18d61c4faa46a664736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c8063a8ea9bd014610023575b600080fd5b61003d60048036038101906100389190610463565b61003f565b005b61004a83838361004f565b505050565b61007b7f0000000000000000000000000000000000000000000000000000000000000000848484610080565b505050565b6000818060200190518101906100969190610621565b905080600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916638a69005a60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614610132578060000151638a69005a60e01b6040517ff0cd8b8300000000000000000000000000000000000000000000000000000000815260040161012992919061066f565b60405180910390fd5b6000816040015111156101bc578473ffffffffffffffffffffffffffffffffffffffff16639a2ac6d58260400151868460200151876040518563ffffffff1660e01b81526004016101859392919061073e565b6000604051808303818588803b15801561019e57600080fd5b505af11580156101b2573d6000803e3d6000fd5b50505050506102a4565b60008573ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610209573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190610791565b90508073ffffffffffffffffffffffffffffffffffffffff16633dbb202b868685602001516040518463ffffffff1660e01b8152600401610270939291906107be565b600060405180830381600087803b15801561028a57600080fd5b505af115801561029e573d6000803e3d6000fd5b50505050505b5050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102ea826102bf565b9050919050565b6102fa816102df565b811461030557600080fd5b50565b600081359050610317816102f1565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61037082610327565b810181811067ffffffffffffffff8211171561038f5761038e610338565b5b80604052505050565b60006103a26102ab565b90506103ae8282610367565b919050565b600067ffffffffffffffff8211156103ce576103cd610338565b5b6103d782610327565b9050602081019050919050565b82818337600083830152505050565b6000610406610401846103b3565b610398565b90508281526020810184848401111561042257610421610322565b5b61042d8482856103e4565b509392505050565b600082601f83011261044a5761044961031d565b5b813561045a8482602086016103f3565b91505092915050565b60008060006060848603121561047c5761047b6102b5565b5b600061048a86828701610308565b935050602084013567ffffffffffffffff8111156104ab576104aa6102ba565b5b6104b786828701610435565b925050604084013567ffffffffffffffff8111156104d8576104d76102ba565b5b6104e486828701610435565b9150509250925092565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610528816104f3565b811461053357600080fd5b50565b6000815190506105458161051f565b92915050565b600063ffffffff82169050919050565b6105648161054b565b811461056f57600080fd5b50565b6000815190506105818161055b565b92915050565b6000819050919050565b61059a81610587565b81146105a557600080fd5b50565b6000815190506105b781610591565b92915050565b6000606082840312156105d3576105d26104ee565b5b6105dd6060610398565b905060006105ed84828501610536565b600083015250602061060184828501610572565b6020830152506040610615848285016105a8565b60408301525092915050565b600060608284031215610637576106366102b5565b5b6000610645848285016105bd565b91505092915050565b6000610659826104f3565b9050919050565b6106698161064e565b82525050565b60006040820190506106846000830185610660565b6106916020830184610660565b9392505050565b6106a1816102df565b82525050565b6106b08161054b565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106f05780820151818401526020810190506106d5565b838111156106ff576000848401525b50505050565b6000610710826106b6565b61071a81856106c1565b935061072a8185602086016106d2565b61073381610327565b840191505092915050565b60006060820190506107536000830186610698565b61076060208301856106a7565b81810360408301526107728184610705565b9050949350505050565b60008151905061078b816102f1565b92915050565b6000602082840312156107a7576107a66102b5565b5b60006107b58482850161077c565b91505092915050565b60006060820190506107d36000830186610698565b81810360208301526107e58185610705565b90506107f460408301846106a7565b94935050505056fea264697066735822122068a29a00be4989a8edf5a69011c029dc2af91c449a5fb3943b18d61c4faa46a664736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}