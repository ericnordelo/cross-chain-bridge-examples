{
  "address": "0x0a5F41285862A2D5889E4d0f879d10fd356ba0cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "actual",
          "type": "bytes4"
        },
        {
          "internalType": "bytes4",
          "name": "expected",
          "type": "bytes4"
        }
      ],
      "name": "InvalidTargetBridge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "RetryableTicketCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "crossChainTxParams",
          "type": "bytes"
        }
      ],
      "name": "sendCrossChainMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90cd09d734ce45924210769fcfb025397aeefb15fac958c052331c73a4f55710",
  "receipt": {
    "to": null,
    "from": "0x4A8Cc549c71f12817F9aA25F7f6a37EB1A4Fa087",
    "contractAddress": "0x0a5F41285862A2D5889E4d0f879d10fd356ba0cb",
    "transactionIndex": 21,
    "gasUsed": "542716",
    "logsBloom": "0x
    "blockHash": "0xf0c7dbc9909b75683debe561d3d65cba81777a5fa525edbc1c756e3c8fe30477",
    "transactionHash": "0x90cd09d734ce45924210769fcfb025397aeefb15fac958c052331c73a4f55710",
    "logs": [],
    "blockNumber": 10864170,
    "cumulativeGasUsed": "3739328",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a28e783c47bbeb813f32b861a431d0776681e95"
  ],
  "numDeployments": 1,
  "solcInputHash": "129082cb9bea0890dbcbed675f220a6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"actual\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"expected\",\"type\":\"bytes4\"}],\"name\":\"InvalidTargetBridge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"RetryableTicketCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"crossChainTxParams\",\"type\":\"bytes\"}],\"name\":\"sendCrossChainMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/senders/SenderArbitrumL1.sol\":\"SenderArbitrumL1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/crosschain/CrossChainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/CrossChainEnabled.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./errors.sol\\\";\\n\\n/**\\n * @dev Provides information for building cross-chain aware contracts. This\\n * abstract contract provides accessors and modifiers to control the execution\\n * flow when receiving cross-chain messages.\\n *\\n * Actual implementations of cross-chain aware contracts, which are based on\\n * this abstraction, will  have to inherit from a bridge-specific\\n * specialization. Such specializations are provided under\\n * `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabled {\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution.\\n     */\\n    modifier onlyCrossChain() {\\n        if (!_isCrossChain()) revert NotCrossChainCall();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution initiated by `account`.\\n     */\\n    modifier onlyCrossChainSender(address expected) {\\n        address actual = _crossChainSender();\\n        if (expected != actual) revert InvalidCrossChainSender(actual, expected);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message.\\n     */\\n    function _isCrossChain() internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Returns the address of the sender of the cross-chain message that\\n     * triggered the current function call.\\n     *\\n     * IMPORTANT: Should revert with `NotCrossChainCall` if the current function\\n     * call is not the result of a cross-chain message.\\n     */\\n    function _crossChainSender() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Sends a generic cross-chain message through a bridge.\\n     *\\n     * IMPORTANT: The structure of the crossChainTxParams is defined in the implementations\\n     * and can be built using the SDKs of the corresponding bridge most of the times.\\n     *\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded struct representing the configuration required\\n     * for the message to be sent through the bridge.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x1c08eca01a31352431755c5081896b921ae3dc1e4679b278e2309ed0eb7b60ef\",\"license\":\"MIT\"},\"contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../CrossChainEnabled.sol\\\";\\nimport \\\"./LibArbitrumL1.sol\\\";\\n\\n/**\\n * @dev https://arbitrum.io/[Arbitrum] specialization or the\\n * {CrossChainEnabled} abstraction the L1 side (mainnet).\\n *\\n * This version should only be deployed on L1 to process cross-chain messages\\n * originating from L2, or to send cross-chain messages from L1 to L2. For\\n * the other side, use {CrossChainEnabledArbitrumL2}.\\n *\\n * The bridge contract is provided and maintained by the arbitrum team. You can\\n * find the address of this contract on the rinkeby testnet in\\n * https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation].\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabledArbitrumL1 is CrossChainEnabled {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _bridge;\\n\\n    event RetryableTicketCreated(uint256 indexed ticketId);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address bridge) {\\n        _bridge = bridge;\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_isCrossChain}\\n     */\\n    function _isCrossChain() internal view virtual override returns (bool) {\\n        return LibArbitrumL1.isCrossChain(_bridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_crossChainSender}\\n     */\\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\\n        return LibArbitrumL1.crossChainSender(_bridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_sendCrossChainMessage}\\n     *\\n     * NOTE: Emits a RetryableTicketCreated with the Id of the new L2 ticket.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual override {\\n        uint256 ticketId = LibArbitrumL1.sendCrossChainMessage(_bridge, destination, data, crossChainTxParams);\\n\\n        emit RetryableTicketCreated(ticketId);\\n    }\\n}\\n\",\"keccak256\":\"0x65728cc0062075a6f4b87e58f473ae7d3927ddfebf2c68a6319ea4abf30f07f5\",\"license\":\"MIT\"},\"contracts/crosschain/arbitrum/LibArbitrumL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/LibArbitrumL1.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {IBridge as ArbitrumL1_Bridge} from \\\"../../vendor/arbitrum/IBridge.sol\\\";\\nimport {IInbox as ArbitrumL1_Inbox} from \\\"../../vendor/arbitrum/IInbox.sol\\\";\\nimport {IOutbox as ArbitrumL1_Outbox} from \\\"../../vendor/arbitrum/IOutbox.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\n/**\\n * @dev Primitives for cross-chain aware contracts for\\n * https://arbitrum.io/[Arbitrum].\\n *\\n * This version should only be used on L1 to process cross-chain messages\\n * originating from L2, or to send cross-chain messages from L1 to L2. For\\n * the other side, use {LibArbitrumL2}.\\n */\\nlibrary LibArbitrumL1 {\\n    /**\\n     * @dev This is the first 4 bytes of the keccak256('Arbitrum-L1L2')\\n     */\\n    bytes4 public constant BRIDGE_ID = 0xf99ba2be;\\n\\n    /**\\n     * @dev These are the parameters required for creating the Retryable Ticket in L2.\\n     *\\n     * NOTE: Refer to the https://developer.offchainlabs.com/docs/l1_l2_messages#parameters[Parameters Docs] in Arbitrum\\n     * for a detailed explanation of each param.\\n     *\\n     * @param bridgeId This Id is used to ensure this bridge only send messages intended for this bridge,\\n     * avoiding some unexpected scenarios if a config for a different bridge matches.\\n     */\\n    struct CrossChainTxParams {\\n        bytes4 bridgeId;\\n        uint256 depositValue;\\n        uint256 l2CallValue;\\n        uint256 maxSubmissionCost;\\n        address excessFeeRefundAddress;\\n        address callValueRefundAddress;\\n        uint256 maxGas;\\n        uint256 gasPriceBid;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message relayed by the `bridge`.\\n     */\\n    function isCrossChain(address bridge) internal view returns (bool) {\\n        return msg.sender == bridge;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the sender that triggered the current\\n     * cross-chain message through the `bridge`.\\n     *\\n     * NOTE: {isCrossChain} should be checked before trying to recover the\\n     * sender, as it will revert with `NotCrossChainCall` if the current\\n     * function call is not the result of a cross-chain message.\\n     */\\n    function crossChainSender(address bridge) internal view returns (address) {\\n        if (!isCrossChain(bridge)) revert NotCrossChainCall();\\n\\n        address sender = ArbitrumL1_Outbox(ArbitrumL1_Bridge(bridge).activeOutbox()).l2ToL1Sender();\\n        require(sender != address(0), \\\"LibArbitrumL1: system messages without sender\\\");\\n\\n        return sender;\\n    }\\n\\n    /**\\n     * @dev Sends a cross-chain message from L1 to L2 via `Inbox`.\\n     * @param bridge The Bridge contract in the L1.\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded {CrossChainTxParams} representing the parameters required\\n     * for the message to be sent through the bridge.\\n     * @return ticketId A unique identifier for the Retryable Ticket created.\\n     */\\n    function sendCrossChainMessage(\\n        address bridge,\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal returns (uint256 ticketId) {\\n        // there delayed inbox is the first of the allowedInboxList\\n        address delayedInbox = ArbitrumL1_Bridge(bridge).allowedInboxList(0);\\n\\n        CrossChainTxParams memory params = abi.decode(crossChainTxParams, (CrossChainTxParams));\\n\\n        if (BRIDGE_ID != params.bridgeId) revert InvalidTargetBridge(params.bridgeId, BRIDGE_ID);\\n\\n        ticketId = ArbitrumL1_Inbox(delayedInbox).createRetryableTicket{value: params.depositValue}(\\n            destination,\\n            params.l2CallValue,\\n            params.maxSubmissionCost,\\n            params.excessFeeRefundAddress,\\n            params.callValueRefundAddress,\\n            params.maxGas,\\n            params.gasPriceBid,\\n            data\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xf43ac06c4a43df9a86804cf5b84eca51a4725d7ddf61ef2efb2900e0405a3d57\",\"license\":\"MIT\"},\"contracts/crosschain/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/errors.sol)\\n\\npragma solidity ^0.8.4;\\n\\nerror NotCrossChainCall();\\nerror InvalidCrossChainSender(address actual, address expected);\\nerror InvalidTargetBridge(bytes4 actual, bytes4 expected);\\n\",\"keccak256\":\"0x4c8a62c098a35a7ac8ca1fec0523e19f1e8e4d173780640e9197b54fc9d195a6\",\"license\":\"MIT\"},\"contracts/senders/SenderArbitrumL1.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"../crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\\\";\\n\\ncontract SenderArbitrumL1 is CrossChainEnabledArbitrumL1 {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address bridge_) CrossChainEnabledArbitrumL1(bridge_) {}\\n\\n    function sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) external payable {\\n        _sendCrossChainMessage(destination, data, crossChainTxParams);\\n    }\\n}\\n\",\"keccak256\":\"0x7873510a726872313d0e59d616e721688c318cbb106ee5ad67c46a0c3eb72f36\",\"license\":\"Unlicense\"},\"contracts/vendor/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IBridge.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(address indexed outbox, address indexed destAddr, uint256 amount, bytes data);\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxList(uint256 index) external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08dc1fc720525843d5b35eae33d3b83e6ac38bdc91123e0f82c3d3aa7a8d711c\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IInbox.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x17cc873fcf37a9da600abfda6efad5f237f89e749b9974b00c2fbd9b3a21deb3\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IMessageProvider.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x313f5c576f539a5fa5b0827680f2faf30714f3b5e8cfd3fd01045869c790ca43\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IOutbox.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9ec23c9f986bf3240450c1096236dd9c195f99e1037c41051d5fd01680d31da5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516109e53803806109e5833981810160405281019061003291906100d1565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050506100fe565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009e82610073565b9050919050565b6100ae81610093565b81146100b957600080fd5b50565b6000815190506100cb816100a5565b92915050565b6000602082840312156100e7576100e661006e565b5b60006100f5848285016100bc565b91505092915050565b6080516108cd6101186000396000605601526108cd6000f3fe60806040526004361061001e5760003560e01c8063a8ea9bd014610023575b600080fd5b61003d6004803603810190610038919061044f565b61003f565b005b61004a83838361004f565b505050565b600061007d7f00000000000000000000000000000000000000000000000000000000000000008585856100b2565b9050807fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f60405160405180910390a250505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16637ee9432960006040518263ffffffff1660e01b81526004016100ef9190610529565b602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610559565b905060008380602001905181019061014891906106d9565b905080600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663f99ba2be60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146101e457806000015163f99ba2be60e01b6040517fe06c77730000000000000000000000000000000000000000000000000000000081526004016101db929190610716565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663679b6ded8260200151888460400151856060015186608001518760a001518860c001518960e001518e6040518a63ffffffff1660e01b81526004016102489897969594939291906107e5565b60206040518083038185885af1158015610266573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061028b919061086a565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102d6826102ab565b9050919050565b6102e6816102cb565b81146102f157600080fd5b50565b600081359050610303816102dd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61035c82610313565b810181811067ffffffffffffffff8211171561037b5761037a610324565b5b80604052505050565b600061038e610297565b905061039a8282610353565b919050565b600067ffffffffffffffff8211156103ba576103b9610324565b5b6103c382610313565b9050602081019050919050565b82818337600083830152505050565b60006103f26103ed8461039f565b610384565b90508281526020810184848401111561040e5761040d61030e565b5b6104198482856103d0565b509392505050565b600082601f83011261043657610435610309565b5b81356104468482602086016103df565b91505092915050565b600080600060608486031215610468576104676102a1565b5b6000610476868287016102f4565b935050602084013567ffffffffffffffff811115610497576104966102a6565b5b6104a386828701610421565b925050604084013567ffffffffffffffff8111156104c4576104c36102a6565b5b6104d086828701610421565b9150509250925092565b6000819050919050565b6000819050919050565b6000819050919050565b600061051361050e610509846104da565b6104ee565b6104e4565b9050919050565b610523816104f8565b82525050565b600060208201905061053e600083018461051a565b92915050565b600081519050610553816102dd565b92915050565b60006020828403121561056f5761056e6102a1565b5b600061057d84828501610544565b91505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6105c08161058b565b81146105cb57600080fd5b50565b6000815190506105dd816105b7565b92915050565b6105ec816104e4565b81146105f757600080fd5b50565b600081519050610609816105e3565b92915050565b6000610100828403121561062657610625610586565b5b610631610100610384565b90506000610641848285016105ce565b6000830152506020610655848285016105fa565b6020830152506040610669848285016105fa565b604083015250606061067d848285016105fa565b606083015250608061069184828501610544565b60808301525060a06106a584828501610544565b60a08301525060c06106b9848285016105fa565b60c08301525060e06106cd848285016105fa565b60e08301525092915050565b600061010082840312156106f0576106ef6102a1565b5b60006106fe8482850161060f565b91505092915050565b6107108161058b565b82525050565b600060408201905061072b6000830185610707565b6107386020830184610707565b9392505050565b610748816102cb565b82525050565b610757816104e4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561079757808201518184015260208101905061077c565b838111156107a6576000848401525b50505050565b60006107b78261075d565b6107c18185610768565b93506107d1818560208601610779565b6107da81610313565b840191505092915050565b6000610100820190506107fb600083018b61073f565b610808602083018a61074e565b610815604083018961074e565b610822606083018861073f565b61082f608083018761073f565b61083c60a083018661074e565b61084960c083018561074e565b81810360e083015261085b81846107ac565b90509998505050505050505050565b6000602082840312156108805761087f6102a1565b5b600061088e848285016105fa565b9150509291505056fea2646970667358221220527c0d860433fcda7dd32bd32d6536895b3779c0f5f297dc39c71c9de27faf8064736f6c634300080b0033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c8063a8ea9bd014610023575b600080fd5b61003d6004803603810190610038919061044f565b61003f565b005b61004a83838361004f565b505050565b600061007d7f00000000000000000000000000000000000000000000000000000000000000008585856100b2565b9050807fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f60405160405180910390a250505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16637ee9432960006040518263ffffffff1660e01b81526004016100ef9190610529565b602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101309190610559565b905060008380602001905181019061014891906106d9565b905080600001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191663f99ba2be60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916146101e457806000015163f99ba2be60e01b6040517fe06c77730000000000000000000000000000000000000000000000000000000081526004016101db929190610716565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663679b6ded8260200151888460400151856060015186608001518760a001518860c001518960e001518e6040518a63ffffffff1660e01b81526004016102489897969594939291906107e5565b60206040518083038185885af1158015610266573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061028b919061086a565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102d6826102ab565b9050919050565b6102e6816102cb565b81146102f157600080fd5b50565b600081359050610303816102dd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61035c82610313565b810181811067ffffffffffffffff8211171561037b5761037a610324565b5b80604052505050565b600061038e610297565b905061039a8282610353565b919050565b600067ffffffffffffffff8211156103ba576103b9610324565b5b6103c382610313565b9050602081019050919050565b82818337600083830152505050565b60006103f26103ed8461039f565b610384565b90508281526020810184848401111561040e5761040d61030e565b5b6104198482856103d0565b509392505050565b600082601f83011261043657610435610309565b5b81356104468482602086016103df565b91505092915050565b600080600060608486031215610468576104676102a1565b5b6000610476868287016102f4565b935050602084013567ffffffffffffffff811115610497576104966102a6565b5b6104a386828701610421565b925050604084013567ffffffffffffffff8111156104c4576104c36102a6565b5b6104d086828701610421565b9150509250925092565b6000819050919050565b6000819050919050565b6000819050919050565b600061051361050e610509846104da565b6104ee565b6104e4565b9050919050565b610523816104f8565b82525050565b600060208201905061053e600083018461051a565b92915050565b600081519050610553816102dd565b92915050565b60006020828403121561056f5761056e6102a1565b5b600061057d84828501610544565b91505092915050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6105c08161058b565b81146105cb57600080fd5b50565b6000815190506105dd816105b7565b92915050565b6105ec816104e4565b81146105f757600080fd5b50565b600081519050610609816105e3565b92915050565b6000610100828403121561062657610625610586565b5b610631610100610384565b90506000610641848285016105ce565b6000830152506020610655848285016105fa565b6020830152506040610669848285016105fa565b604083015250606061067d848285016105fa565b606083015250608061069184828501610544565b60808301525060a06106a584828501610544565b60a08301525060c06106b9848285016105fa565b60c08301525060e06106cd848285016105fa565b60e08301525092915050565b600061010082840312156106f0576106ef6102a1565b5b60006106fe8482850161060f565b91505092915050565b6107108161058b565b82525050565b600060408201905061072b6000830185610707565b6107386020830184610707565b9392505050565b610748816102cb565b82525050565b610757816104e4565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561079757808201518184015260208101905061077c565b838111156107a6576000848401525b50505050565b60006107b78261075d565b6107c18185610768565b93506107d1818560208601610779565b6107da81610313565b840191505092915050565b6000610100820190506107fb600083018b61073f565b610808602083018a61074e565b610815604083018961074e565b610822606083018861073f565b61082f608083018761073f565b61083c60a083018661074e565b61084960c083018561074e565b81810360e083015261085b81846107ac565b90509998505050505050505050565b6000602082840312156108805761087f6102a1565b5b600061088e848285016105fa565b9150509291505056fea2646970667358221220527c0d860433fcda7dd32bd32d6536895b3779c0f5f297dc39c71c9de27faf8064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}