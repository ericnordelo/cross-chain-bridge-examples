{
  "address": "0x5917B8103F44d2bA85E2d09e8F063bF0100b7312",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "actual",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "expected",
          "type": "bytes32"
        }
      ],
      "name": "InvalidTargetBridge",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "RetryableTicketCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "crossChainTxParams",
          "type": "bytes"
        }
      ],
      "name": "sendCrossChainMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22263f75f5d46e537a859fc4db5b55e01ac436cab1b1b8e271ab41380aedecc9",
  "receipt": {
    "to": null,
    "from": "0x4A8Cc549c71f12817F9aA25F7f6a37EB1A4Fa087",
    "contractAddress": "0x5917B8103F44d2bA85E2d09e8F063bF0100b7312",
    "transactionIndex": 32,
    "gasUsed": "537094",
    "logsBloom": "0x
    "blockHash": "0x4284427b77df1b97e0c639c7084eca0da751ee5cb1f67a46f4a1c0792f1063e8",
    "transactionHash": "0x22263f75f5d46e537a859fc4db5b55e01ac436cab1b1b8e271ab41380aedecc9",
    "logs": [],
    "blockNumber": 10857600,
    "cumulativeGasUsed": "4624226",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9a28e783c47bbeb813f32b861a431d0776681e95"
  ],
  "numDeployments": 1,
  "solcInputHash": "fd93be5e00f654fae462e5d5f83d88d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"actual\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"expected\",\"type\":\"bytes32\"}],\"name\":\"InvalidTargetBridge\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"RetryableTicketCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"crossChainTxParams\",\"type\":\"bytes\"}],\"name\":\"sendCrossChainMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Sender.sol\":\"Sender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Sender.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\\\";\\n\\ncontract Sender is CrossChainEnabledArbitrumL1 {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address bridge_) CrossChainEnabledArbitrumL1(bridge_) {}\\n\\n    function sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) external {\\n        _sendCrossChainMessage(destination, data, crossChainTxParams);\\n    }\\n}\\n\",\"keccak256\":\"0xd028451c24c9aad0a4de893a9a3a8dd2a676f378e1e035f1b4f2368b95d86665\",\"license\":\"Unlicense\"},\"contracts/crosschain/CrossChainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/CrossChainEnabled.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./errors.sol\\\";\\n\\n/**\\n * @dev Provides information for building cross-chain aware contracts. This\\n * abstract contract provides accessors and modifiers to control the execution\\n * flow when receiving cross-chain messages.\\n *\\n * Actual implementations of cross-chain aware contracts, which are based on\\n * this abstraction, will  have to inherit from a bridge-specific\\n * specialization. Such specializations are provided under\\n * `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabled {\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution.\\n     */\\n    modifier onlyCrossChain() {\\n        if (!_isCrossChain()) revert NotCrossChainCall();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution initiated by `account`.\\n     */\\n    modifier onlyCrossChainSender(address expected) {\\n        address actual = _crossChainSender();\\n        if (expected != actual) revert InvalidCrossChainSender(actual, expected);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message.\\n     */\\n    function _isCrossChain() internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Returns the address of the sender of the cross-chain message that\\n     * triggered the current function call.\\n     *\\n     * IMPORTANT: Should revert with `NotCrossChainCall` if the current function\\n     * call is not the result of a cross-chain message.\\n     */\\n    function _crossChainSender() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Sends a generic cross-chain message through a bridge.\\n     *\\n     * IMPORTANT: The structure of the crossChainTxParams is defined in the implementations\\n     * and can be built using the SDKs of the corresponding bridge most of the times.\\n     *\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded struct representing the configuration required\\n     * for the message to be sent through the bridge.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x1c08eca01a31352431755c5081896b921ae3dc1e4679b278e2309ed0eb7b60ef\",\"license\":\"MIT\"},\"contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/CrossChainEnabledArbitrumL1.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../CrossChainEnabled.sol\\\";\\nimport \\\"./LibArbitrumL1.sol\\\";\\n\\n/**\\n * @dev https://arbitrum.io/[Arbitrum] specialization or the\\n * {CrossChainEnabled} abstraction the L1 side (mainnet).\\n *\\n * This version should only be deployed on L1 to process cross-chain messages\\n * originating from L2, or to send cross-chain messages from L1 to L2. For\\n * the other side, use {CrossChainEnabledArbitrumL2}.\\n *\\n * The bridge contract is provided and maintained by the arbitrum team. You can\\n * find the address of this contract on the rinkeby testnet in\\n * https://developer.offchainlabs.com/docs/useful_addresses[Arbitrum's developer documentation].\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabledArbitrumL1 is CrossChainEnabled {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _bridge;\\n\\n    event RetryableTicketCreated(uint256 indexed ticketId);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address bridge) {\\n        _bridge = bridge;\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_isCrossChain}\\n     */\\n    function _isCrossChain() internal view virtual override returns (bool) {\\n        return LibArbitrumL1.isCrossChain(_bridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_crossChainSender}\\n     */\\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\\n        return LibArbitrumL1.crossChainSender(_bridge);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_sendCrossChainMessage}\\n     *\\n     * NOTE: Emits a RetryableTicketCreated with the Id of the new L2 ticket.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual override {\\n        uint256 ticketId = LibArbitrumL1.sendCrossChainMessage(\\n            _bridge,\\n            destination,\\n            data,\\n            crossChainTxParams\\n        );\\n\\n        emit RetryableTicketCreated(ticketId);\\n    }\\n}\\n\",\"keccak256\":\"0xdb95a9c053fdbf8da9d8a7bd97a8a239198bc71c7df5f4a38dd06ba136a4cf73\",\"license\":\"MIT\"},\"contracts/crosschain/arbitrum/LibArbitrumL1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/LibArbitrumL1.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {IBridge as ArbitrumL1_Bridge} from \\\"../../vendor/arbitrum/IBridge.sol\\\";\\nimport {IInbox as ArbitrumL1_Inbox} from \\\"../../vendor/arbitrum/IInbox.sol\\\";\\nimport {IOutbox as ArbitrumL1_Outbox} from \\\"../../vendor/arbitrum/IOutbox.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\n/**\\n * @dev Primitives for cross-chain aware contracts for\\n * https://arbitrum.io/[Arbitrum].\\n *\\n * This version should only be used on L1 to process cross-chain messages\\n * originating from L2, or to send cross-chain messages from L1 to L2. For\\n * the other side, use {LibArbitrumL2}.\\n */\\nlibrary LibArbitrumL1 {\\n    /**\\n     * @dev This is the keccak256('Arbitrum-L1L2')\\n     */\\n    bytes32 public constant BRIDGE_ID = 0xf99ba2be00af9942e39d17830153f4e6000e00d50e0db314b50f3740e70a7015;\\n\\n    /**\\n     * @dev These are the parameters required for creating the Retryable Ticket in L2.\\n     *\\n     * NOTE: Refer to the https://developer.offchainlabs.com/docs/l1_l2_messages#parameters[Parameters Docs] in Arbitrum\\n     * for a detailed explanation of each param.\\n     *\\n     * @param bridgeId This Id is used to ensure this bridge only send messages intended for this bridge,\\n     * avoiding some unexpected scenarios if a config for a different bridge matches.\\n     */\\n    struct CrossChainTxParams {\\n        bytes32 bridgeId;\\n        uint256 depositValue;\\n        uint256 l2CallValue;\\n        uint256 maxSubmissionCost;\\n        address excessFeeRefundAddress;\\n        address callValueRefundAddress;\\n        uint256 maxGas;\\n        uint256 gasPriceBid;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message relayed by the `bridge`.\\n     */\\n    function isCrossChain(address bridge) internal view returns (bool) {\\n        return msg.sender == bridge;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the sender that triggered the current\\n     * cross-chain message through the `bridge`.\\n     *\\n     * NOTE: {isCrossChain} should be checked before trying to recover the\\n     * sender, as it will revert with `NotCrossChainCall` if the current\\n     * function call is not the result of a cross-chain message.\\n     */\\n    function crossChainSender(address bridge) internal view returns (address) {\\n        if (!isCrossChain(bridge)) revert NotCrossChainCall();\\n\\n        address sender = ArbitrumL1_Outbox(ArbitrumL1_Bridge(bridge).activeOutbox()).l2ToL1Sender();\\n        require(sender != address(0), \\\"LibArbitrumL1: system messages without sender\\\");\\n\\n        return sender;\\n    }\\n\\n    /**\\n     * @dev Sends a cross-chain message from L1 to L2 via `Inbox`.\\n     * @param bridge The Bridge contract in the L1.\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded {CrossChainTxParams} representing the parameters required\\n     * for the message to be sent through the bridge.\\n     * @return ticketId A unique identifier for the Retryable Ticket created.\\n     */\\n    function sendCrossChainMessage(\\n        address bridge,\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal returns (uint256 ticketId) {\\n        // TODO: Confirm that the first inbox is the delayed inbox,\\n        // there are two inboxes in the bridge and the second one is not the sequencer inbox\\n        address delayedInbox = ArbitrumL1_Bridge(bridge).allowedInboxList(0);\\n\\n        CrossChainTxParams memory params = abi.decode(crossChainTxParams, (CrossChainTxParams));\\n\\n        if (BRIDGE_ID != params.bridgeId) revert InvalidTargetBridge(params.bridgeId, BRIDGE_ID);\\n\\n        ticketId = ArbitrumL1_Inbox(delayedInbox).createRetryableTicket{value: params.depositValue}(\\n            destination,\\n            params.l2CallValue,\\n            params.maxSubmissionCost,\\n            params.excessFeeRefundAddress,\\n            params.callValueRefundAddress,\\n            params.maxGas,\\n            params.gasPriceBid,\\n            data\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1e2d1f13bf46b3f59071902eafed72f668a199d53b55806e2807dffa985978b7\",\"license\":\"MIT\"},\"contracts/crosschain/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/errors.sol)\\n\\npragma solidity ^0.8.4;\\n\\nerror NotCrossChainCall();\\nerror InvalidCrossChainSender(address actual, address expected);\\nerror InvalidTargetBridge(bytes32 actual, bytes32 expected);\\n\",\"keccak256\":\"0x39aeb23b80f089177825252531e5e653caac7f2440a54c0e1aa423069314e0b6\",\"license\":\"MIT\"},\"contracts/vendor/arbitrum/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IBridge.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IBridge {\\n    event MessageDelivered(\\n        uint256 indexed messageIndex,\\n        bytes32 indexed beforeInboxAcc,\\n        address inbox,\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    );\\n\\n    event BridgeCallTriggered(address indexed outbox, address indexed destAddr, uint256 amount, bytes data);\\n\\n    event InboxToggle(address indexed inbox, bool enabled);\\n\\n    event OutboxToggle(address indexed outbox, bool enabled);\\n\\n    function deliverMessageToInbox(\\n        uint8 kind,\\n        address sender,\\n        bytes32 messageDataHash\\n    ) external payable returns (uint256);\\n\\n    function executeCall(\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory returnData);\\n\\n    // These are only callable by the admin\\n    function setInbox(address inbox, bool enabled) external;\\n\\n    function setOutbox(address inbox, bool enabled) external;\\n\\n    // View functions\\n\\n    function activeOutbox() external view returns (address);\\n\\n    function allowedInboxList(uint256 index) external view returns (address);\\n\\n    function allowedInboxes(address inbox) external view returns (bool);\\n\\n    function allowedOutboxes(address outbox) external view returns (bool);\\n\\n    function inboxAccs(uint256 index) external view returns (bytes32);\\n\\n    function messageCount() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08dc1fc720525843d5b35eae33d3b83e6ac38bdc91123e0f82c3d3aa7a8d711c\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IInbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IInbox.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IMessageProvider.sol\\\";\\n\\ninterface IInbox is IMessageProvider {\\n    function sendL2Message(bytes calldata messageData) external returns (uint256);\\n\\n    function sendUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n\\n    function sendL1FundedUnsignedTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        uint256 nonce,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function sendL1FundedContractTransaction(\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        address destAddr,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function createRetryableTicketNoRefundAliasRewrite(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    function depositEth(uint256 maxSubmissionCost) external payable returns (uint256);\\n\\n    function bridge() external view returns (address);\\n\\n    function pauseCreateRetryables() external;\\n\\n    function unpauseCreateRetryables() external;\\n\\n    function startRewriteAddress() external;\\n\\n    function stopRewriteAddress() external;\\n}\\n\",\"keccak256\":\"0x17cc873fcf37a9da600abfda6efad5f237f89e749b9974b00c2fbd9b3a21deb3\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IMessageProvider.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IMessageProvider.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IMessageProvider {\\n    event InboxMessageDelivered(uint256 indexed messageNum, bytes data);\\n\\n    event InboxMessageDeliveredFromOrigin(uint256 indexed messageNum);\\n}\\n\",\"keccak256\":\"0x313f5c576f539a5fa5b0827680f2faf30714f3b5e8cfd3fd01045869c790ca43\",\"license\":\"Apache-2.0\"},\"contracts/vendor/arbitrum/IOutbox.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/arbitrum/IOutbox.sol)\\n\\n/*\\n * Copyright 2021, Offchain Labs, Inc.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *    http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity ^0.8.0;\\n\\ninterface IOutbox {\\n    event OutboxEntryCreated(\\n        uint256 indexed batchNum,\\n        uint256 outboxEntryIndex,\\n        bytes32 outputRoot,\\n        uint256 numInBatch\\n    );\\n    event OutBoxTransactionExecuted(\\n        address indexed destAddr,\\n        address indexed l2Sender,\\n        uint256 indexed outboxEntryIndex,\\n        uint256 transactionIndex\\n    );\\n\\n    function l2ToL1Sender() external view returns (address);\\n\\n    function l2ToL1Block() external view returns (uint256);\\n\\n    function l2ToL1EthBlock() external view returns (uint256);\\n\\n    function l2ToL1Timestamp() external view returns (uint256);\\n\\n    function l2ToL1BatchNum() external view returns (uint256);\\n\\n    function l2ToL1OutputId() external view returns (bytes32);\\n\\n    function processOutgoingMessages(bytes calldata sendsData, uint256[] calldata sendLengths) external;\\n\\n    function outboxEntryExists(uint256 batchNum) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9ec23c9f986bf3240450c1096236dd9c195f99e1037c41051d5fd01680d31da5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516109ca3803806109ca833981810160405281019061003291906100d1565b808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050506100fe565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009e82610073565b9050919050565b6100ae81610093565b81146100b957600080fd5b50565b6000815190506100cb816100a5565b92915050565b6000602082840312156100e7576100e661006e565b5b60006100f5848285016100bc565b91505092915050565b6080516108b26101186000396000606301526108b26000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a8ea9bd014610030575b600080fd5b61004a60048036038101906100459190610456565b61004c565b005b61005783838361005c565b505050565b600061008a7f00000000000000000000000000000000000000000000000000000000000000008585856100bf565b9050807fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f60405160405180910390a250505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16637ee9432960006040518263ffffffff1660e01b81526004016100fc9190610530565b602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190610560565b905060008380602001905181019061015591906106be565b905080600001517ff99ba2be00af9942e39d17830153f4e6000e00d50e0db314b50f3740e70a701560001b146101eb5780600001517ff99ba2be00af9942e39d17830153f4e6000e00d50e0db314b50f3740e70a701560001b6040517ff0cd8b830000000000000000000000000000000000000000000000000000000081526004016101e29291906106fb565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663679b6ded8260200151888460400151856060015186608001518760a001518860c001518960e001518e6040518a63ffffffff1660e01b815260040161024f9897969594939291906107ca565b60206040518083038185885af115801561026d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610292919061084f565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102dd826102b2565b9050919050565b6102ed816102d2565b81146102f857600080fd5b50565b60008135905061030a816102e4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103638261031a565b810181811067ffffffffffffffff821117156103825761038161032b565b5b80604052505050565b600061039561029e565b90506103a1828261035a565b919050565b600067ffffffffffffffff8211156103c1576103c061032b565b5b6103ca8261031a565b9050602081019050919050565b82818337600083830152505050565b60006103f96103f4846103a6565b61038b565b90508281526020810184848401111561041557610414610315565b5b6104208482856103d7565b509392505050565b600082601f83011261043d5761043c610310565b5b813561044d8482602086016103e6565b91505092915050565b60008060006060848603121561046f5761046e6102a8565b5b600061047d868287016102fb565b935050602084013567ffffffffffffffff81111561049e5761049d6102ad565b5b6104aa86828701610428565b925050604084013567ffffffffffffffff8111156104cb576104ca6102ad565b5b6104d786828701610428565b9150509250925092565b6000819050919050565b6000819050919050565b6000819050919050565b600061051a610515610510846104e1565b6104f5565b6104eb565b9050919050565b61052a816104ff565b82525050565b60006020820190506105456000830184610521565b92915050565b60008151905061055a816102e4565b92915050565b600060208284031215610576576105756102a8565b5b60006105848482850161054b565b91505092915050565b600080fd5b6000819050919050565b6105a581610592565b81146105b057600080fd5b50565b6000815190506105c28161059c565b92915050565b6105d1816104eb565b81146105dc57600080fd5b50565b6000815190506105ee816105c8565b92915050565b6000610100828403121561060b5761060a61058d565b5b61061661010061038b565b90506000610626848285016105b3565b600083015250602061063a848285016105df565b602083015250604061064e848285016105df565b6040830152506060610662848285016105df565b60608301525060806106768482850161054b565b60808301525060a061068a8482850161054b565b60a08301525060c061069e848285016105df565b60c08301525060e06106b2848285016105df565b60e08301525092915050565b600061010082840312156106d5576106d46102a8565b5b60006106e3848285016105f4565b91505092915050565b6106f581610592565b82525050565b600060408201905061071060008301856106ec565b61071d60208301846106ec565b9392505050565b61072d816102d2565b82525050565b61073c816104eb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561077c578082015181840152602081019050610761565b8381111561078b576000848401525b50505050565b600061079c82610742565b6107a6818561074d565b93506107b681856020860161075e565b6107bf8161031a565b840191505092915050565b6000610100820190506107e0600083018b610724565b6107ed602083018a610733565b6107fa6040830189610733565b6108076060830188610724565b6108146080830187610724565b61082160a0830186610733565b61082e60c0830185610733565b81810360e08301526108408184610791565b90509998505050505050505050565b600060208284031215610865576108646102a8565b5b6000610873848285016105df565b9150509291505056fea264697066735822122020e54a2f0b539d5cde03f8a87498ea9fe4ab3dcabddd1ba18dbc118e0f8ed2ba64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a8ea9bd014610030575b600080fd5b61004a60048036038101906100459190610456565b61004c565b005b61005783838361005c565b505050565b600061008a7f00000000000000000000000000000000000000000000000000000000000000008585856100bf565b9050807fde92b5b7839f4a2c640f5e3bbb66d415458dadc57a487b0c7fa562ed7c9c896f60405160405180910390a250505050565b6000808573ffffffffffffffffffffffffffffffffffffffff16637ee9432960006040518263ffffffff1660e01b81526004016100fc9190610530565b602060405180830381865afa158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d9190610560565b905060008380602001905181019061015591906106be565b905080600001517ff99ba2be00af9942e39d17830153f4e6000e00d50e0db314b50f3740e70a701560001b146101eb5780600001517ff99ba2be00af9942e39d17830153f4e6000e00d50e0db314b50f3740e70a701560001b6040517ff0cd8b830000000000000000000000000000000000000000000000000000000081526004016101e29291906106fb565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663679b6ded8260200151888460400151856060015186608001518760a001518860c001518960e001518e6040518a63ffffffff1660e01b815260040161024f9897969594939291906107ca565b60206040518083038185885af115801561026d573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610292919061084f565b92505050949350505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102dd826102b2565b9050919050565b6102ed816102d2565b81146102f857600080fd5b50565b60008135905061030a816102e4565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6103638261031a565b810181811067ffffffffffffffff821117156103825761038161032b565b5b80604052505050565b600061039561029e565b90506103a1828261035a565b919050565b600067ffffffffffffffff8211156103c1576103c061032b565b5b6103ca8261031a565b9050602081019050919050565b82818337600083830152505050565b60006103f96103f4846103a6565b61038b565b90508281526020810184848401111561041557610414610315565b5b6104208482856103d7565b509392505050565b600082601f83011261043d5761043c610310565b5b813561044d8482602086016103e6565b91505092915050565b60008060006060848603121561046f5761046e6102a8565b5b600061047d868287016102fb565b935050602084013567ffffffffffffffff81111561049e5761049d6102ad565b5b6104aa86828701610428565b925050604084013567ffffffffffffffff8111156104cb576104ca6102ad565b5b6104d786828701610428565b9150509250925092565b6000819050919050565b6000819050919050565b6000819050919050565b600061051a610515610510846104e1565b6104f5565b6104eb565b9050919050565b61052a816104ff565b82525050565b60006020820190506105456000830184610521565b92915050565b60008151905061055a816102e4565b92915050565b600060208284031215610576576105756102a8565b5b60006105848482850161054b565b91505092915050565b600080fd5b6000819050919050565b6105a581610592565b81146105b057600080fd5b50565b6000815190506105c28161059c565b92915050565b6105d1816104eb565b81146105dc57600080fd5b50565b6000815190506105ee816105c8565b92915050565b6000610100828403121561060b5761060a61058d565b5b61061661010061038b565b90506000610626848285016105b3565b600083015250602061063a848285016105df565b602083015250604061064e848285016105df565b6040830152506060610662848285016105df565b60608301525060806106768482850161054b565b60808301525060a061068a8482850161054b565b60a08301525060c061069e848285016105df565b60c08301525060e06106b2848285016105df565b60e08301525092915050565b600061010082840312156106d5576106d46102a8565b5b60006106e3848285016105f4565b91505092915050565b6106f581610592565b82525050565b600060408201905061071060008301856106ec565b61071d60208301846106ec565b9392505050565b61072d816102d2565b82525050565b61073c816104eb565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561077c578082015181840152602081019050610761565b8381111561078b576000848401525b50505050565b600061079c82610742565b6107a6818561074d565b93506107b681856020860161075e565b6107bf8161031a565b840191505092915050565b6000610100820190506107e0600083018b610724565b6107ed602083018a610733565b6107fa6040830189610733565b6108076060830188610724565b6108146080830187610724565b61082160a0830186610733565b61082e60c0830185610733565b81810360e08301526108408184610791565b90509998505050505050505050565b600060208284031215610865576108646102a8565b5b6000610873848285016105df565b9150509291505056fea264697066735822122020e54a2f0b539d5cde03f8a87498ea9fe4ab3dcabddd1ba18dbc118e0f8ed2ba64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}