{
  "address": "0x1A6dFaB05b250Ea4E9ff3849F37171aeCcc4807D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "greeting_",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotCrossChainCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "greet",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "greeting_",
          "type": "string"
        }
      ],
      "name": "setGreeting",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a6d9959ce0b3e14efd880e5bfe379700de2cbcffda13976686824211b88c3bd",
  "receipt": {
    "to": null,
    "from": "0x4A8Cc549c71f12817F9aA25F7f6a37EB1A4Fa087",
    "contractAddress": "0x1A6dFaB05b250Ea4E9ff3849F37171aeCcc4807D",
    "transactionIndex": 0,
    "gasUsed": "438725",
    "logsBloom": "0x
    "blockHash": "0x3673ae4690fc814a7c5acfdc1fe2ff916c090150832514d132420c74a58b9b07",
    "transactionHash": "0x4a6d9959ce0b3e14efd880e5bfe379700de2cbcffda13976686824211b88c3bd",
    "logs": [],
    "blockNumber": 4032692,
    "cumulativeGasUsed": "438725",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000010",
    "Hello!"
  ],
  "numDeployments": 2,
  "solcInputHash": "9b7d59125f539ec031ec2259e5d48029",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"greeting_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotCrossChainCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"greeting_\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GreeterOnlyCrossChain.sol\":\"GreeterOnlyCrossChain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/GreeterOnlyCrossChain.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport \\\"./crosschain/optimism/CrossChainEnabledOptimismL2.sol\\\";\\n\\ncontract GreeterOnlyCrossChain is CrossChainEnabledOptimismL2 {\\n    string private _greeting;\\n\\n    constructor(address bridge_, string memory greeting_) CrossChainEnabledOptimismL2(bridge_) {\\n        _greeting = greeting_;\\n    }\\n\\n    function greet() public view returns (string memory) {\\n        return _greeting;\\n    }\\n\\n    function setGreeting(string memory greeting_) public payable onlyCrossChain {\\n        _greeting = greeting_;\\n    }\\n}\\n\",\"keccak256\":\"0x51499e23e3db1d3e44ff3ce53c0b670637289b5ec4483d10950da36e124ae74d\",\"license\":\"Unlicense\"},\"contracts/crosschain/CrossChainEnabled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/CrossChainEnabled.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./errors.sol\\\";\\n\\n/**\\n * @dev Provides information for building cross-chain aware contracts. This\\n * abstract contract provides accessors and modifiers to control the execution\\n * flow when receiving cross-chain messages.\\n *\\n * Actual implementations of cross-chain aware contracts, which are based on\\n * this abstraction, will  have to inherit from a bridge-specific\\n * specialization. Such specializations are provided under\\n * `crosschain/<chain>/CrossChainEnabled<chain>.sol`.\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabled {\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution.\\n     */\\n    modifier onlyCrossChain() {\\n        if (!_isCrossChain()) revert NotCrossChainCall();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if the current function call is not the result of a\\n     * cross-chain execution initiated by `account`.\\n     */\\n    modifier onlyCrossChainSender(address expected) {\\n        address actual = _crossChainSender();\\n        if (expected != actual) revert InvalidCrossChainSender(actual, expected);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message.\\n     */\\n    function _isCrossChain() internal view virtual returns (bool);\\n\\n    /**\\n     * @dev Returns the address of the sender of the cross-chain message that\\n     * triggered the current function call.\\n     *\\n     * IMPORTANT: Should revert with `NotCrossChainCall` if the current function\\n     * call is not the result of a cross-chain message.\\n     */\\n    function _crossChainSender() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Sends a generic cross-chain message through a bridge.\\n     *\\n     * IMPORTANT: The structure of the crossChainTxParams is defined in the implementations\\n     * and can be built using the SDKs of the corresponding bridge most of the times.\\n     *\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded struct representing the configuration required\\n     * for the message to be sent through the bridge.\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual;\\n}\\n\",\"keccak256\":\"0x1c08eca01a31352431755c5081896b921ae3dc1e4679b278e2309ed0eb7b60ef\",\"license\":\"MIT\"},\"contracts/crosschain/errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/errors.sol)\\n\\npragma solidity ^0.8.4;\\n\\nerror NotCrossChainCall();\\nerror InvalidCrossChainSender(address actual, address expected);\\nerror InvalidTargetBridge(bytes4 actual, bytes4 expected);\\n\",\"keccak256\":\"0x4c8a62c098a35a7ac8ca1fec0523e19f1e8e4d173780640e9197b54fc9d195a6\",\"license\":\"MIT\"},\"contracts/crosschain/optimism/CrossChainEnabledOptimismL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/optimism/CrossChainEnabledOptimism.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../CrossChainEnabled.sol\\\";\\nimport \\\"./LibOptimismL2.sol\\\";\\n\\n/**\\n * @dev https://www.optimism.io/[Optimism] specialization or the\\n * {CrossChainEnabled} abstraction.\\n *\\n * The bridge (`L1StandardBridge`) contract is provided and maintained by\\n * the optimism team. You can find the address of this contract on mainnet and\\n * kovan in the https://github.com/ethereum-optimism/optimism/tree/develop/packages/contracts/deployments[deployments section of Optimism monorepo].\\n *\\n * _Available since v4.6._\\n */\\nabstract contract CrossChainEnabledOptimismL2 is CrossChainEnabled {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _l2StandardBridge;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address l2StandardBridge) {\\n        _l2StandardBridge = l2StandardBridge;\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_isCrossChain}\\n     */\\n    function _isCrossChain() internal view virtual override returns (bool) {\\n        address messenger = IL2StandardBridge(_l2StandardBridge).messenger();\\n\\n        return LibOptimismL2.isCrossChain(messenger);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_crossChainSender}\\n     */\\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\\n        address messenger = IL2StandardBridge(_l2StandardBridge).messenger();\\n\\n        return LibOptimismL2.crossChainSender(messenger);\\n    }\\n\\n    /**\\n     * @dev see {CrossChainEnabled-_sendCrossChainMessage}\\n     */\\n    function _sendCrossChainMessage(\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal virtual override {\\n        LibOptimismL2.sendCrossChainMessage(_l2StandardBridge, destination, data, crossChainTxParams);\\n    }\\n}\\n\",\"keccak256\":\"0x3fb73ebefc6afaa2a76ae2fb69526959a92ee3ad2e14fb26490ce52ff89b1622\",\"license\":\"MIT\"},\"contracts/crosschain/optimism/LibOptimismL2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/optimism/LibOptimism.sol)\\n\\npragma solidity ^0.8.4;\\n\\nimport {ICrossDomainMessenger} from \\\"../../vendor/optimism/ICrossDomainMessenger.sol\\\";\\nimport {IL2StandardBridge} from \\\"../../vendor/optimism/IL2StandardBridge.sol\\\";\\nimport \\\"../errors.sol\\\";\\n\\n/**\\n * @dev Primitives for cross-chain aware contracts for https://www.optimism.io/[Optimism].\\n * See the https://community.optimism.io/docs/developers/bridge/messaging/#accessing-msg-sender[documentation]\\n * for the functionality used here.\\n *\\n * This version should only be used on L2 to process cross-chain messages\\n * originating from L1, or to send cross-chain messages from L2 to L1. For\\n * the other side, use {LibOptimismL1}.\\n */\\nlibrary LibOptimismL2 {\\n    /**\\n     * @dev This is the keccak256('Optimism-L2L1')\\n     */\\n    bytes4 public constant BRIDGE_ID = 0xa2b60698;\\n\\n    /**\\n     * @dev These are the parameters required for sending the cross-chain message.\\n     *\\n     * @param bridgeId This Id is used to ensure this bridge only send messages intended for this bridge,\\n     * avoiding some unexpected scenarios if a config for a different bridge matches.\\n     */\\n    struct CrossChainTxParams {\\n        bytes4 bridgeId;\\n        uint32 gasLimit;\\n        uint256 depositValue;\\n    }\\n\\n    /**\\n     * @dev Returns whether the current function call is the result of a\\n     * cross-chain message relayed by `messenger`.\\n     */\\n    function isCrossChain(address messenger) internal view returns (bool) {\\n        return msg.sender == messenger;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the sender that triggered the current\\n     * cross-chain message through `messenger`.\\n     *\\n     * NOTE: {isCrossChain} should be checked before trying to recover the\\n     * sender, as it will revert with `NotCrossChainCall` if the current\\n     * function call is not the result of a cross-chain message.\\n     */\\n    function crossChainSender(address messenger) internal view returns (address) {\\n        if (!isCrossChain(messenger)) revert NotCrossChainCall();\\n\\n        return ICrossDomainMessenger(messenger).xDomainMessageSender();\\n    }\\n\\n    /**\\n     * @dev Sends a cross-chain message via `messenger`.\\n     *\\n     * NOTE: Check https://community.optimism.io/docs/developers/bridge/messaging/#[Fees for sending data between L1 and L2]\\n     * to understand gasLimit implications.\\n     *\\n     * @param bridge The L1StandardBridge contract representing the bridge.\\n     * @param destination The address of the cross-chain target contract.\\n     * @param data The calldata of the cross-chain call.\\n     * @param crossChainTxParams An ABI encoded {CrossChainTxParams} representing the parameters required\\n     * for the message to be sent through the bridge.\\n     */\\n    function sendCrossChainMessage(\\n        address bridge,\\n        address destination,\\n        bytes memory data,\\n        bytes memory crossChainTxParams\\n    ) internal {\\n        CrossChainTxParams memory params = abi.decode(crossChainTxParams, (CrossChainTxParams));\\n\\n        if (BRIDGE_ID != params.bridgeId) revert InvalidTargetBridge(params.bridgeId, BRIDGE_ID);\\n\\n        if (params.depositValue > 0) {\\n            // deposit ETH through standard bridge\\n            IL2StandardBridge(bridge).withdrawTo(\\n                0x4200000000000000000000000000000000000006, // Wrapped Ether in L2\\n                destination,\\n                params.depositValue,\\n                params.gasLimit,\\n                data\\n            );\\n        } else {\\n            // send the message directly through the messenger\\n            address messenger = IL2StandardBridge(bridge).messenger();\\n            ICrossDomainMessenger(messenger).sendMessage(destination, data, params.gasLimit);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3581a280948298a90826269a093d3ee9328ea3f37c03c36689a754ec020e0d54\",\"license\":\"MIT\"},\"contracts/vendor/optimism/ICrossDomainMessenger.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (vendor/optimism/ICrossDomainMessenger.sol)\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title ICrossDomainMessenger\\n */\\ninterface ICrossDomainMessenger {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event SentMessage(address indexed target, address sender, bytes message, uint256 messageNonce, uint256 gasLimit);\\n    event RelayedMessage(bytes32 indexed msgHash);\\n    event FailedRelayedMessage(bytes32 indexed msgHash);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    function xDomainMessageSender() external view returns (address);\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sends a cross domain message to the target messenger.\\n     * @param target Target contract address.\\n     * @param message Message to send to the target.\\n     * @param gasLimit Gas limit for the provided message.\\n     */\\n    function sendMessage(\\n        address target,\\n        bytes calldata message,\\n        uint32 gasLimit\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe4ac74035c033445a1baeec0c2939c9c7a88e388d2b7c8b6bda535ebaed65af5\",\"license\":\"MIT\"},\"contracts/vendor/optimism/IL2StandardBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IL2StandardBridge\\n */\\ninterface IL2StandardBridge {\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    function messenger() external view returns (address);\\n\\n    /**\\n     * @dev initiate a withdraw of some token to a recipient's account on L1.\\n     * @param _l2Token Address of L2 token where withdrawal is initiated.\\n     * @param _to L1 adress to credit the withdrawal to.\\n     * @param _amount Amount of the token to withdraw.\\n     * param _l1Gas Unused, but included for potential forward compatibility considerations.\\n     * @param _data Optional data to forward to L1. This data is provided\\n     *        solely as a convenience for external contracts. Aside from enforcing a maximum\\n     *        length, these contracts provide no guarantees about its content.\\n     */\\n    function withdrawTo(\\n        address _l2Token,\\n        address _to,\\n        uint256 _amount,\\n        uint32 _l1Gas,\\n        bytes calldata _data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6d14b2ce3314365d55888ac290c605720a46487f225b8236198217725ad58dbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162000a7338038062000a73833981810160405281019062000037919062000340565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508060009080519060200190620000859291906200008e565b5050506200040b565b8280546200009c90620003d5565b90600052602060002090601f016020900481019282620000c057600085556200010c565b82601f10620000db57805160ff19168380011785556200010c565b828001600101855582156200010c579182015b828111156200010b578251825591602001919060010190620000ee565b5b5090506200011b91906200011f565b5090565b5b808211156200013a57600081600090555060010162000120565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200017f8262000152565b9050919050565b620001918162000172565b81146200019d57600080fd5b50565b600081519050620001b18162000186565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200020c82620001c1565b810181811067ffffffffffffffff821117156200022e576200022d620001d2565b5b80604052505050565b6000620002436200013e565b905062000251828262000201565b919050565b600067ffffffffffffffff821115620002745762000273620001d2565b5b6200027f82620001c1565b9050602081019050919050565b60005b83811015620002ac5780820151818401526020810190506200028f565b83811115620002bc576000848401525b50505050565b6000620002d9620002d38462000256565b62000237565b905082815260208101848484011115620002f857620002f7620001bc565b5b620003058482856200028c565b509392505050565b600082601f830112620003255762000324620001b7565b5b815162000337848260208601620002c2565b91505092915050565b600080604083850312156200035a576200035962000148565b5b60006200036a85828601620001a0565b925050602083015167ffffffffffffffff8111156200038e576200038d6200014d565b5b6200039c858286016200030d565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003ee57607f821691505b60208210811415620004055762000404620003a6565b5b50919050565b60805161064c620004276000396000610164015261064c6000f3fe6080604052600436106100295760003560e01c8063a41368621461002e578063cfae32171461004a575b600080fd5b61004860048036038101906100439190610437565b610075565b005b34801561005657600080fd5b5061005f6100cd565b60405161006c9190610508565b60405180910390f35b61007d61015f565b6100b3576040517f4a74df9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600090805190602001906100c992919061023a565b5050565b6060600080546100dc90610559565b80601f016020809104026020016040519081016040528092919081815260200182805461010890610559565b80156101555780601f1061012a57610100808354040283529160200191610155565b820191906000526020600020905b81548152906001019060200180831161013857829003601f168201915b5050505050905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f191906105e9565b90506101fc81610202565b91505090565b60008173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050919050565b82805461024690610559565b90600052602060002090601f01602090048101928261026857600085556102af565b82601f1061028157805160ff19168380011785556102af565b828001600101855582156102af579182015b828111156102ae578251825591602001919060010190610293565b5b5090506102bc91906102c0565b5090565b5b808211156102d95760008160009055506001016102c1565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610344826102fb565b810181811067ffffffffffffffff821117156103635761036261030c565b5b80604052505050565b60006103766102dd565b9050610382828261033b565b919050565b600067ffffffffffffffff8211156103a2576103a161030c565b5b6103ab826102fb565b9050602081019050919050565b82818337600083830152505050565b60006103da6103d584610387565b61036c565b9050828152602081018484840111156103f6576103f56102f6565b5b6104018482856103b8565b509392505050565b600082601f83011261041e5761041d6102f1565b5b813561042e8482602086016103c7565b91505092915050565b60006020828403121561044d5761044c6102e7565b5b600082013567ffffffffffffffff81111561046b5761046a6102ec565b5b61047784828501610409565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ba57808201518184015260208101905061049f565b838111156104c9576000848401525b50505050565b60006104da82610480565b6104e4818561048b565b93506104f481856020860161049c565b6104fd816102fb565b840191505092915050565b6000602082019050818103600083015261052281846104cf565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061057157607f821691505b602082108114156105855761058461052a565b5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b68261058b565b9050919050565b6105c6816105ab565b81146105d157600080fd5b50565b6000815190506105e3816105bd565b92915050565b6000602082840312156105ff576105fe6102e7565b5b600061060d848285016105d4565b9150509291505056fea264697066735822122018cb0912648d9acf03ff810c536ac0f864694e2e6f0d872b00da0edf7418bc6764736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063a41368621461002e578063cfae32171461004a575b600080fd5b61004860048036038101906100439190610437565b610075565b005b34801561005657600080fd5b5061005f6100cd565b60405161006c9190610508565b60405180910390f35b61007d61015f565b6100b3576040517f4a74df9200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600090805190602001906100c992919061023a565b5050565b6060600080546100dc90610559565b80601f016020809104026020016040519081016040528092919081815260200182805461010890610559565b80156101555780601f1061012a57610100808354040283529160200191610155565b820191906000526020600020905b81548152906001019060200180831161013857829003601f168201915b5050505050905090565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16633cb747bf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f191906105e9565b90506101fc81610202565b91505090565b60008173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16149050919050565b82805461024690610559565b90600052602060002090601f01602090048101928261026857600085556102af565b82601f1061028157805160ff19168380011785556102af565b828001600101855582156102af579182015b828111156102ae578251825591602001919060010190610293565b5b5090506102bc91906102c0565b5090565b5b808211156102d95760008160009055506001016102c1565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610344826102fb565b810181811067ffffffffffffffff821117156103635761036261030c565b5b80604052505050565b60006103766102dd565b9050610382828261033b565b919050565b600067ffffffffffffffff8211156103a2576103a161030c565b5b6103ab826102fb565b9050602081019050919050565b82818337600083830152505050565b60006103da6103d584610387565b61036c565b9050828152602081018484840111156103f6576103f56102f6565b5b6104018482856103b8565b509392505050565b600082601f83011261041e5761041d6102f1565b5b813561042e8482602086016103c7565b91505092915050565b60006020828403121561044d5761044c6102e7565b5b600082013567ffffffffffffffff81111561046b5761046a6102ec565b5b61047784828501610409565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104ba57808201518184015260208101905061049f565b838111156104c9576000848401525b50505050565b60006104da82610480565b6104e4818561048b565b93506104f481856020860161049c565b6104fd816102fb565b840191505092915050565b6000602082019050818103600083015261052281846104cf565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061057157607f821691505b602082108114156105855761058461052a565b5b50919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105b68261058b565b9050919050565b6105c6816105ab565b81146105d157600080fd5b50565b6000815190506105e3816105bd565b92915050565b6000602082840312156105ff576105fe6102e7565b5b600061060d848285016105d4565b9150509291505056fea264697066735822122018cb0912648d9acf03ff810c536ac0f864694e2e6f0d872b00da0edf7418bc6764736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GreeterOnlyCrossChain.sol:GreeterOnlyCrossChain",
        "label": "_greeting",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}